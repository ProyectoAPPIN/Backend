<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bonos.Api.Rest</name>
    </assembly>
    <members>
        <member name="M:Bonos.Api.Rest.Controllers.eventosController.ReportTransactionBonoFromPOS(com.mercaderia.bono.Entidades.Dto.IngresoDto)">
            <summary>
            Servicio para registrar el ingreso a la sede       
            </summary>
            <returns></returns>   
        </member>
        <member name="M:Bonos.Api.Rest.Controllers.InstitucionController.GetInstituciones">
            <summary>
            Método que devuelve las instituciones registrados en la base de datos
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bonos.Api.Rest.Controllers.DominioController.GetTipoDocumentos">
            <summary>
            M�todo que devuelve los tipos de documento registrados en la base de datos
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bonos.Api.Rest.Controllers.DominioController.GetRoles">
            <summary>
            M�todo que devuelve los roles registrados en la base de datos
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bonos.Api.Rest.Controllers.DominioController.GetSendNotificaciones">
            <summary>
            Metodo para enviar notificaciones masivas
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bonos.Api.Rest.Controllers.DominioController.GetSendNotificacionFirebase">
            <summary>
            Metodo para enviar notificaciones masivas firebase
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bonos.Api.Rest.Controllers.DominioController.GetUltimoLavadoManos(System.String)">
            <summary>
            M�todo que devuelve los tipos de documento registrados en la base de datos
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bonos.Api.Rest.Controllers.DominioController.GetRecordatoriosLavadoManos(System.String)">
            <summary>
            M�todo que devuelve recordatorio de lavado de manos
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bonos.Api.Rest.Controllers.SintomasController.GetSintomas">
            <summary>
            Método que devuelve los sintomas registrados en la base de datos
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bonos.Api.Rest.Controllers.SintomasController.CargueMasivoGiftCards(com.mercaderia.bono.Entidades.Dto.SintomasDTO[],System.String)">
            <summary>
            Método que registra los sintomas de un usuario
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bonos.Api.Rest.Controllers.UsuarioController.Post(com.mercaderia.bono.Entidades.Dto.UsuarioDto)">
            <summary>
            Método que registra el usuario en la aplicacion
            </summary>
            <returns></returns>       
        </member>
        <member name="M:Bonos.Api.Rest.Controllers.UsuarioController.ReportTransactionBonoFromPOS(com.mercaderia.bono.Entidades.Dto.UsuarioActivoDto)">
            <summary>
            Servicio para activar el usuario       
            </summary>
            <returns></returns>   
        </member>
        <member name="M:Bonos.Api.Rest.Controllers.UsuarioController.GetValidaUsuario(System.String,System.String,System.String)">
            <summary>
            Servicio para dar acceso a la aplicacion se valida si el tipo documento y numero de documento e institucion existen
            Se verifica si tiene un registro de ingreso
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bonos.Api.Rest.Controllers.UsuarioController.ReenviarCodActivacion(com.mercaderia.bono.Entidades.Dto.UsuarioActivoDto)">
            <summary>
            Servicio para reenviar codigo activacion       
            </summary>
            <returns></returns>   
        </member>
        <member name="M:Bonos.Api.Rest.Controllers.UsuarioController.GetUsuario(System.String,System.String)">
            <summary>
            Método que consulta informacion de un usuario si ya existe en la base de datos para cargar informacion existente
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bonos.Api.Rest.Helper.TokenValidationHandler">
            <summary>
            Token validator for Authorization Request using a DelegatingHandler
            </summary>
        </member>
        <member name="M:Bonos.Api.Rest.Helper.TokenValidationHandler.HttpResponseIsNotCorsRequest(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Construye HttpResponseMessage si IsNotCorsRequest
            </summary>
        </member>
        <member name="M:Bonos.Api.Rest.Helper.TokenValidationHandler.HttpResponseIsPreflightRequest(System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken)">
            <summary>
            Construye HttpResponseMessage si isPreflightRequest
            </summary>
        </member>
        <member name="M:Bonos.Api.Rest.Helper.TokenValidationHandler.VerificarRequestLocal(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Verifica si el metodo es público y valida token
            </summary>
        </member>
        <member name="M:Bonos.Api.Rest.Helper.TokenValidationHandler.VerificarRequest(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Verifica si el metodo es público y valida token
            </summary>
        </member>
    </members>
</doc>
